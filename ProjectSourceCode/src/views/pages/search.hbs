<html lang="en">

  <head>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Recipe Search</title>
      <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <link rel="stylesheet" href="/css/style.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
      <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css"
    />
      <script
      src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"
    ></script>

  </head>

  <body>
      <div class="recipe-container">
      <div class="recipe-search-container">
        <h1>Recipe Search</h1>
        <form id="searchForm" class="recipe-search-form">
          <input
            type="text"
            id="searchInput"
            placeholder="Enter a recipe name"
            required
          />
          <div
            id="filtersContainer"
            class="recipe-filter-container"
            style="display: none;"
          >
            <input
              type="text"
              id="ingredientsInput"
              placeholder="Enter ingredients (comma-separated)"
            />
            <div class="filter-container">
              <div class="recipe-select-container">
                <select
                  id="cuisineSelect"
                  multiple
                  data-placeholder="Select cuisines"
                  class="recipe-choices"
                >
                  <option value="">All Cuisines</option>
                  <option value="American">American</option>
                  <option value="Italian">Italian</option>
                  <option value="Mexican">Mexican</option>
                  <option value="French">French</option>
                  <option value="Chinese">Chinese</option>
                  <option value="Indian">Indian</option>
                  <option value="Japanese">Japanese</option>
                  <option value="Mediterranean">Mediterranean</option>
                  <option value="Thai">Thai</option>
                  <option value="Vietnamese">Vietnamese</option>
                </select>
              </div>
              <div class="recipe-select-container">
                <select
                  id="dietSelect"
                  multiple
                  data-placeholder="Select diets"
                  class="recipe-choices"
                >
                  <option value="">All Diets</option>
                  <option value="Gluten Free">Gluten Free</option>
                  <option value="Ketogenic">Ketogenic</option>
                  <option value="Vegetarian">Vegetarian</option>
                  <option value="Lacto-Vegetarian">Lacto-Vegetarian</option>
                  <option value="Ovo-Vegetarian">Ovo-Vegetarian</option>
                  <option value="Vegan">Vegan</option>
                  <option value="Pescetarian">Pescetarian</option>
                  <option value="Paleo">Paleo</option>
                  <option value="Primal">Primal</option>
                  <option value="Whole30">Whole30</option>
                </select>
              </div>
              <div class="recipe-select-container">
                <select
                  id="intoleranceSelect"
                  multiple
                  data-placeholder="Select intolerances"
                  class="recipe-choices"
                >
                  <option value="">No Intolerances</option>
                  <option value="Dairy">Dairy</option>
                  <option value="Egg">Egg</option>
                  <option value="Gluten">Gluten</option>
                  <option value="Grain">Grain</option>
                  <option value="Peanut">Peanut</option>
                  <option value="Seafood">Seafood</option>
                  <option value="Sesame">Sesame</option>
                  <option value="Shellfish">Shellfish</option>
                  <option value="Soy">Soy</option>
                  <option value="Sulfite">Sulfite</option>
                  <option value="Tree Nut">Tree Nut</option>
                  <option value="Wheat">Wheat</option>
                </select>
              </div>
              <select id="priceSelect" class="recipe-select">
                <option value="">All Prices</option>
                <option value="$">$</option>
                <option value="$$">$$</option>
                <option value="$$$">$$$</option>
                <option value="$$$$">$$$$</option>
              </select>
            </div>
          </div>
          <button type="submit" class="recipe-search-button">Search</button>
          <button
            type="button"
            id="toggleFiltersBtn"
            class="recipe-toggle-filters-button"
          >Show Filters</button>
        </form>
      </div>
      <div id="recommendedResults" class="recipe-list">
        <h2>Recommended Recipes</h2>
        <!-- Recommended recipe cards will be dynamically generated here -->
      </div>
      <div id="searchResults" class="recipe-list">
        <h2>Search Results</h2>
        <!-- Search result recipe cards will be dynamically generated here -->
      </div>
      <div class="pagination">
        <button
          id="prevPage"
          disabled
          class="recipe-pagination-button"
        >Previous</button>
        <button id="nextPage" class="recipe-pagination-button">Next</button>
      </div>

      <div id="recipeDetails" class="recipe-details-container">
        <!-- Recipe details will be dynamically generated here -->
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
  <script id="recipeTemplate" type="text/x-handlebars-template">
    <h2>{{title}}</h2>
    <img src="{{image}}" alt="{{title}}">
    <p>{{{summary}}}</p>
    <h3>Ingredients</h3>
    <ul>
      {{#each extendedIngredients}}
        <li>{{original}}</li>
      {{/each}}
    </ul>
    <h3>Instructions</h3>
    <ol>
      {{#each analyzedInstructions.[0].steps}}
        <li>{{step}}</li>
      {{/each}}
    </ol>
  </script>
  <script>
    const searchForm = document.getElementById('searchForm');
    const searchInput = document.getElementById('searchInput');
    const ingredientsInput = document.getElementById('ingredientsInput');
    const cuisineSelect = document.getElementById('cuisineSelect');
    const dietSelect = document.getElementById('dietSelect');
    const intoleranceSelect = document.getElementById('intoleranceSelect');
    const priceSelect = document.getElementById('priceSelect');
    const recommendedContainer = document.getElementById('recommendedResults');
    const resultsContainer = document.getElementById('searchResults');
    const prevPageBtn = document.getElementById('prevPage');
    const nextPageBtn = document.getElementById('nextPage');
    const recipeDetailsContainer = document.getElementById('recipeDetails');

    let currentPage = 1;
    let totalResults = 0;

    // Handlebars template
    const recipeTemplate = Handlebars.compile(document.getElementById('recipeTemplate').innerHTML);

    new Choices('#cuisineSelect', {
      removeItemButton: true,
      maxItemCount: 5,
      searchResultLimit: 5,
      renderChoiceLimit: 5
    });

    new Choices('#dietSelect', {
      removeItemButton: true,
      maxItemCount: 5,
      searchResultLimit: 5,
      renderChoiceLimit: 5
    });

    new Choices('#intoleranceSelect', {
      removeItemButton: true,
      maxItemCount: 5,
      searchResultLimit: 5,
      renderChoiceLimit: 5
    });

    searchForm.addEventListener('submit', async (event) => {
      event.preventDefault();

      // Clear or hide the recommended recipes container
      recommendedContainer.innerHTML = ''; // This clears the content
      recommendedContainer.style.display = 'none'; // This hides the container

      const query = searchInput.value.trim();
      const ingredients = ingredientsInput.value.trim();
      const cuisine = Array.from(cuisineSelect.selectedOptions).map(option => option.value).join(',');
      const diet = Array.from(dietSelect.selectedOptions).map(option => option.value).join(',');
      const intolerance = Array.from(intoleranceSelect.selectedOptions).map(option => option.value).join(',');
      const price = priceSelect.value;

      const searchResults = await searchRecipes(query, ingredients, cuisine, diet, intolerance, price, currentPage);
      displayRecipes(searchResults.results, resultsContainer);
      totalResults = searchResults.totalResults;
      updatePagination();
    });

    document.addEventListener('DOMContentLoaded', (event) => {
      const toggleFiltersBtn = document.getElementById('toggleFiltersBtn');
      const filtersContainer = document.getElementById('filtersContainer');

      toggleFiltersBtn.addEventListener('click', () => {
        // Check the current display style and toggle it
        if (filtersContainer.style.display === 'none' || filtersContainer.style.display === '') {
          filtersContainer.style.display = 'block'; // Show the filters
        } else {
          filtersContainer.style.display = 'none'; // Hide the filters
        }
      });
    });

    // Function to fetch random recommended recipes
    async function fetchRecommendedRecipes() {
      const options = {
        method: 'GET',
        url: 'https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/random',
        params: { number: '10' },
        headers: {
          'X-RapidAPI-Key': '3122cef951msh40e0e89b8ce8165p1c980bjsnd1b136ffa544',
          'X-RapidAPI-Host': 'spoonacular-recipe-food-nutrition-v1.p.rapidapi.com'
        }
      };

      try {
        const response = await axios.request(options);
        return response.data.recipes;
      } catch (error) {
        console.error(error);
        throw error;
      }
    }

    // Function to display recommended recipes
    async function displayRecommendedRecipes() {
      try {
        const cachedRecipes = localStorage.getItem('recommendedRecipes');

        if (cachedRecipes) {
          const recipes = JSON.parse(cachedRecipes);
          displayRecipes(recipes, recommendedContainer);
        } else {
          const recipes = await fetchRecommendedRecipes();
          localStorage.setItem('recommendedRecipes', JSON.stringify(recipes));
          displayRecipes(recipes, recommendedContainer);
        }
      } catch (error) {
        console.error(error);
        recommendedContainer.innerHTML = '<p>Failed to load recommended recipes. Please try again later.</p>';
      }
    }

    // Function to perform recipe search
    async function searchRecipes(query, ingredients, cuisine, diet, intolerance, price, page = 1) {
      const options = {
        method: 'GET',
        url: 'https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/complexSearch',
        params: {
          query: query,
          includeIngredients: ingredients,
          cuisine: cuisine,
          diet: diet,
          intolerances: intolerance,
          maxPrice: price,
          number: '10',
          offset: (page - 1) * 10
        },
        headers: {
          'X-RapidAPI-Key': '3122cef951msh40e0e89b8ce8165p1c980bjsnd1b136ffa544',
          'X-RapidAPI-Host': 'spoonacular-recipe-food-nutrition-v1.p.rapidapi.com'
        }
      };

      try {
        const response = await axios.request(options);
        return response.data;
      } catch (error) {
        console.error(error);
        throw error;
      }
    }

      // Function to fetch recipe details
    async function getRecipeDetails(recipeId) {
      const options = {
        method: 'GET',
        url: `https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/${recipeId}/information`,
        headers: {
          'X-RapidAPI-Key': '3122cef951msh40e0e89b8ce8165p1c980bjsnd1b136ffa544',
          'X-RapidAPI-Host': 'spoonacular-recipe-food-nutrition-v1.p.rapidapi.com'
        }
      };

      try {
        const response = await axios.request(options);
        return response.data;
      } catch (error) {
        console.error(error);
        throw error;
      }
    }

    // Function to display recipe details
    async function displayRecipeDetails(recipeId) {
      try {
        const recipe = await getRecipeDetails(recipeId);
        const recipeHtml = recipeTemplate(recipe);
        recipeDetailsContainer.innerHTML = recipeHtml;
      } catch (error) {
        console.error(error);
        recipeDetailsContainer.innerHTML = '<p>Failed to load recipe details. Please try again later.</p>';
      }
    }

    // Function to display recipes
    // Adjusted Function to Display Recipes with Click Event for Redirection
    async function displayRecipes(recipes, container) {
      container.innerHTML = '';

      recipes.forEach(recipe => {
        const recipeCard = document.createElement('div');
        recipeCard.classList.add('recipe-card');

        const recipeImage = document.createElement('img');
        recipeImage.src = recipe.image;
        recipeImage.alt = recipe.title;

        const recipeDetails = document.createElement('div');
        recipeDetails.classList.add('recipe-details');

        const recipeTitle = document.createElement('h3');
        recipeTitle.textContent = recipe.title;

        const recipeSummary = document.createElement('p');
        recipeSummary.innerHTML = recipe.summary;

        recipeDetails.appendChild(recipeTitle);
        recipeDetails.appendChild(recipeSummary);

        recipeCard.appendChild(recipeImage);
        recipeCard.appendChild(recipeDetails);

        container.appendChild(recipeCard);

        // Event listener for redirection
        recipeCard.addEventListener('click', () => {
          window.location.href = `recipeDetails.html?recipeId=${recipe.id}`; // Redirect to the details page with recipe ID
        });
      });
    }


    // Function to update pagination buttons
    function updatePagination() {
      prevPageBtn.disabled = currentPage === 1;
      nextPageBtn.disabled = currentPage * 10 >= totalResults;
    }

    // Event listener for search form submission
    searchForm.addEventListener('submit', async (event) => {
      event.preventDefault();

      const query = searchInput.value.trim();
      const ingredients = ingredientsInput.value.trim();
      const cuisine = Array.from(cuisineSelect.selectedOptions).map(option => option.value).join(',');
      const diet = Array.from(dietSelect.selectedOptions).map(option => option.value).join(',');
      const intolerance = Array.from(intoleranceSelect.selectedOptions).map(option => option.value).join(',');
      const price = priceSelect.value;
      const searchResults = await searchRecipes(query, ingredients, cuisine, diet, intolerance, price, currentPage);
      displayRecipes(searchResults.results, resultsContainer);
      totalResults = searchResults.totalResults;
      updatePagination();
    });

    // Event listeners for pagination buttons
    prevPageBtn.addEventListener('click', async () => {
      if (currentPage > 1) {
        currentPage--;
        const query = searchInput.value.trim();
        const ingredients = ingredientsInput.value.trim();
        const cuisine = Array.from(cuisineSelect.selectedOptions).map(option => option.value).join(',');
        const diet = Array.from(dietSelect.selectedOptions).map(option => option.value).join(',');
        const intolerance = Array.from(intoleranceSelect.selectedOptions).map(option => option.value).join(',');
        const price = priceSelect.value;
        const searchResults = await searchRecipes(query, ingredients, cuisine, diet, intolerance, price, currentPage);
        displayRecipes(searchResults.results, resultsContainer);
        updatePagination();
      }
    });

    nextPageBtn.addEventListener('click', async () => {
      currentPage++;
      const query = searchInput.value.trim();
      const ingredients = ingredientsInput.value.trim();
      const cuisine = Array.from(cuisineSelect.selectedOptions).map(option => option.value).join(',');
      const diet = Array.from(dietSelect.selectedOptions).map(option => option.value).join(',');
      const intolerance = Array.from(intoleranceSelect.selectedOptions).map(option => option.value).join(',');
      const price = priceSelect.value;
      const searchResults = await searchRecipes(query, ingredients, cuisine, diet, intolerance, price, currentPage);
      displayRecipes(searchResults.results, resultsContainer);
      updatePagination();
    });


    // Initial call to display recommended recipes
    displayRecommendedRecipes();

  </script>
  </body>

</html>